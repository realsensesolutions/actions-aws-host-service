---
name: 'Actions AWS Host Service'
description: 'Deploy and manage systemd services on EC2 instances using SSM'
inputs:
  name:
    description: 'Service name'
    required: true
  status:
    description: 'Service status (enabled/disabled)'
    required: true
    default: 'enabled'
  definition:
    description: 'Service definition file path (relative to artifacts)'
    required: true
  targets:
    description: 'Target selection criteria in format tag:KEY:VALUE (one per line). Example: tag:Environment:DEV'
    required: true
  working-directory:
    description: 'Where to extract artifacts on target instances'
    required: true
    default: '/home/ssm-user'
  artifacts:
    description: 'Folder containing deployment artifacts'
    required: true
  action:
    description: "Desire outcome: apply, plan or destroy"
    required: false
    default: "apply"

outputs:
  bucket:
    description: "S3 bucket name for artifacts"
    value: ${{ steps.tf-outputs.outputs.bucket }}
  document:
    description: "SSM document ARN"
    value: ${{ steps.tf-outputs.outputs.document }}
  role_name:
    description: "IAM role name"
    value: ${{ steps.tf-outputs.outputs.role_name }}

runs:
  using: "composite"

  steps:
    - name: init
      shell: bash
      working-directory: ${{ github.action_path }}
      run: |
        terraform init \
          -backend-config="bucket=${{ env.TF_BACKEND_s3 }}" \
          -backend-config="dynamodb_table=${{ env.TF_BACKEND_dynamodb }}" \
          -backend-config="key=${{ inputs.name }}"

    - name: run action
      id: tf-action
      shell: bash
      working-directory: ${{ github.action_path }}
      env:
        ACTION: ${{ inputs.action }}
        ACTION_ARGS: ${{ inputs.action != 'plan' && '-auto-approve' || '' }}
        TF_VAR_name: ${{ inputs.name }}
        TF_VAR_status: ${{ inputs.status }}
        TF_VAR_working_directory: ${{ inputs.working-directory }}
        TF_VAR_definition_file: ${{ inputs.definition }}
        TF_VAR_targets: ${{ inputs.targets }}
        TF_VAR_artifacts_path: ${{ github.workspace }}/${{ inputs.artifacts }}
      run: terraform ${{ env.ACTION }} ${{ env.ACTION_ARGS }}

    - name: get terraform outputs
      id: tf-outputs
      if: inputs.action != 'destroy'
      shell: bash
      working-directory: ${{ github.action_path }}
      run: |
        BUCKET=$(terraform output -raw bucket)
        DOCUMENT=$(terraform output -raw document)
        ROLE_NAME=$(terraform output -raw role_name)
        echo "bucket=$BUCKET" >> $GITHUB_OUTPUT
        echo "document=$DOCUMENT" >> $GITHUB_OUTPUT
        echo "role_name=$ROLE_NAME" >> $GITHUB_OUTPUT
